#!/bin/bash
set -e

eval "$(micromamba shell hook --shell=bash)"

# Activate conda environment depending on if we are in Recovery or Standard mode. 
if [ -n "$SAGEMAKER_RECOVERY_MODE" ]; then
    # Activate conda environment `sagemaker-recovery-mode`
    micromamba activate sagemaker-recovery-mode
else
    # Activate conda environment 'base' which is the default for Cosmos
    micromamba activate base

    # Disable jupyter-ai in favor of sagemaker_gen_ai_jupyterlab_extension
    jupyter labextension disable @jupyter-ai/core
fi

sudo cp -r /etc/sagemaker-ui/kernels/. /opt/conda/share/jupyter/kernels/
sudo cp /etc/sagemaker-ui/jupyter/server/jupyter_server_config.py /opt/conda/etc/jupyter/

mkdir -p /opt/conda/share/jupyter/lab/settings
cp -r /etc/sagemaker-ui/jupyter/lab/settings/. /opt/conda/share/jupyter/lab/settings

if [[ $(jupyter kernelspec list | grep pysparkkernel) ]]; then
  jupyter-kernelspec remove -f -y pysparkkernel
fi

if [[ $(jupyter kernelspec list | grep sparkkernel) ]]; then
  jupyter-kernelspec remove -f -y sparkkernel
fi

if [[ $(jupyter kernelspec list | grep glue_spark) ]]; then
  jupyter-kernelspec remove -f -y glue_spark
fi

if [[ $(jupyter kernelspec list | grep glue_pyspark) ]]; then
  jupyter-kernelspec remove -f -y glue_pyspark
fi

# Setup SageMaker MCP configuration
echo "Setting up SageMaker MCP configuration..."
mkdir -p $HOME/.aws/amazonq/
target_file="$HOME/.aws/amazonq/mcp.json"
source_file="/etc/sagemaker-ui/sagemaker-mcp/mcp.json"

if [ -f "$source_file" ]; then
    # Extract all servers from source configuration
    if [ -f "$target_file" ]; then
        # Target file exists - merge configurations
        echo "Existing MCP configuration found, merging configurations..."
        
        # Check if it's valid JSON first
        if jq empty "$target_file" 2>/dev/null; then
            # Initialize mcpServers object if it doesn't exist
            if ! jq -e '.mcpServers' "$target_file" >/dev/null 2>&1; then
                echo "Creating mcpServers object in existing configuration"
                jq '. + {"mcpServers":{}}' "$target_file" > "$target_file.tmp"
                mv "$target_file.tmp" "$target_file"
            fi
            
            servers=$(jq '.mcpServers | keys[]' "$source_file" | tr -d '"')
            
            # Add each server from source to target if it doesn't exist
            for server in $servers; do
                if ! jq -e ".mcpServers.\"$server\"" "$target_file" >/dev/null 2>&1; then
                    server_config=$(jq ".mcpServers.\"$server\"" "$source_file")
                    jq --arg name "$server" --argjson config "$server_config" \
                        '.mcpServers[$name] = $config' "$target_file" > "$target_file.tmp"
                    mv "$target_file.tmp" "$target_file"
                    echo "Added server '$server' to existing configuration"
                else
                    echo "Server '$server' already exists in configuration"
                fi
            done
        else
            echo "Warning: Existing MCP configuration is not valid JSON, replacing with default configuration"
            cp "$source_file" "$target_file"
        fi
    else
        # File doesn't exist, copy our configuration
        cp "$source_file" "$target_file"
        echo "Created new MCP configuration with default servers"
    fi
    
    echo "Successfully configured MCP for SageMaker"
else
    echo "Warning: MCP configuration file not found at $source_file"
fi

if [ -n "$SAGEMAKER_RECOVERY_MODE" ]; then
  # Disabling collaboration and identity_provider_class flags for recovery mode
  jupyter lab --ip 0.0.0.0 --port 8888 \
    --ServerApp.base_url="/$SAGEMAKER_APP_TYPE_LOWERCASE/default" \
    --ServerApp.token='' \
    --ServerApp.allow_origin='*' \
    --SchedulerApp.db_url='sqlite:////tmp/.jupyter_scheduler_do_not_delete.sqlite'
else 
  jupyter lab --ip 0.0.0.0 --port 8888 \
    --ServerApp.base_url="/$SAGEMAKER_APP_TYPE_LOWERCASE/default" \
    --ServerApp.token='' \
    --ServerApp.allow_origin='*' \
    --SchedulerApp.db_url='sqlite:////tmp/.jupyter_scheduler_do_not_delete.sqlite' \
    --collaborative \
    --ServerApp.identity_provider_class='sagemaker_jupyter_server_extension.identity.SageMakerIdentityProvider' 
fi 
